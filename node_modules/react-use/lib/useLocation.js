"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = require("react");
const util_1 = require("./util");
const patchHistoryMethod = (method) => {
    const original = history[method];
    history[method] = function (state) {
        const result = original.apply(this, arguments);
        const event = new Event(method.toLowerCase());
        event.state = state;
        window.dispatchEvent(event);
        return result;
    };
};
if (util_1.isClient) {
    patchHistoryMethod('pushState');
    patchHistoryMethod('replaceState');
}
const useLocation = () => {
    const buildState = (trigger) => {
        const { state, length } = history;
        const { hash, host, hostname, href, origin, pathname, port, protocol, search } = location;
        return {
            trigger,
            state,
            length,
            hash,
            host,
            hostname,
            href,
            origin,
            pathname,
            port,
            protocol,
            search
        };
    };
    const [state, setState] = react_1.useState(util_1.isClient
        ? buildState('load')
        : {
            trigger: 'load',
            length: 1
        });
    const onChange = (trigger) => setState(buildState(trigger));
    const onPopstate = () => onChange('popstate');
    const onPushstate = () => onChange('pushstate');
    const onReplacestate = () => onChange('replacestate');
    react_1.useEffect(() => {
        util_1.on(window, 'popstate', onPopstate);
        util_1.on(window, 'pushstate', onPushstate);
        util_1.on(window, 'replacestate', onReplacestate);
        return () => {
            util_1.off(window, 'popstate', onPopstate);
            util_1.off(window, 'pushstate', onPushstate);
            util_1.off(window, 'replacestate', onReplacestate);
        };
    }, [0]);
    return state;
};
exports.default = useLocation;
