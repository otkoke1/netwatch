"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = require("react");
const util_1 = require("./util");
const getConnection = () => {
    if (typeof navigator !== 'object') {
        return null;
    }
    const nav = navigator;
    return nav.connection || nav.mozConnection || nav.webkitConnection;
};
const getConnectionState = () => {
    const connection = getConnection();
    if (!connection) {
        return {};
    }
    const { downlink, downlinkMax, effectiveType, type, rtt } = connection;
    return {
        downlink,
        downlinkMax,
        effectiveType,
        type,
        rtt
    };
};
const useNetwork = (initialState = {}) => {
    const [state, setState] = react_1.useState(initialState);
    react_1.useEffect(() => {
        let localState = state;
        const localSetState = (patch) => {
            localState = Object.assign({}, localState, patch);
            setState(localState);
        };
        const connection = getConnection();
        const onOnline = () => {
            localSetState({
                online: true,
                since: new Date()
            });
        };
        const onOffline = () => {
            localSetState({
                online: false,
                since: new Date()
            });
        };
        const onConnectionChange = () => {
            localSetState(getConnectionState());
        };
        util_1.on(window, 'online', onOnline);
        util_1.on(window, 'offline', onOffline);
        if (connection) {
            util_1.on(connection, 'change', onConnectionChange);
            localSetState(Object.assign({}, state, { online: navigator.onLine, since: undefined }, getConnectionState()));
        }
        return () => {
            util_1.off(window, 'online', onOnline);
            util_1.off(window, 'offline', onOffline);
            if (connection) {
                util_1.off(connection, 'change', onConnectionChange);
            }
        };
    }, [0]);
    return state;
};
exports.default = useNetwork;
